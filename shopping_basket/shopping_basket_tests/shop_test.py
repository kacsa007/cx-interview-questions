import unittest

from shopping_app import ShoppingApp
from money.money import Money
from money.money import Currency

# tests are going to be here - autogenerated pyCharm environment


class MyTestCase(unittest.TestCase):

    def setUp(self) -> None:
        self.baskett = ShoppingApp()

    def test_case_one(self):

        basket = {"Baked Beans": 4, "Biscuits": 1}
        mocked_value1 = Money('5.16', Currency.GBP)
        mocked_value2 = Money('0.99', Currency.GBP)
        mocked_value3 = Money('4.17', Currency.GBP)
        expected_data = {"sub_total_bill": mocked_value1,
                         "discount_applied": mocked_value2, "total_calculated": mocked_value3}

        for product_name, product_quantity in basket.items():
            self.baskett.populate_basket_with_items(product_name, product_quantity)

        testing_bills = self.baskett.calculate_bill()
        print(testing_bills)
        print(expected_data)
        self.assertDictEqual(testing_bills, expected_data)

    def test_case_two(self):

        basket1 = {"Baked Beans": 2, "Biscuits": 1, "Sardines": 2}
        mocked_value1 = Money('6.96', Currency.GBP)
        mocked_value2 = Money('0.95', Currency.GBP)
        mocked_value3 = Money('6.02', Currency.GBP)
        expected_data = {"sub_total_bill": mocked_value1,
                         "discount_applied": mocked_value2, "total_calculated": mocked_value3}
        for product_name, product_quantity in basket1.items():
            self.baskett.populate_basket_with_items(product_name, product_quantity)

        testing_bills = self.baskett.calculate_bill()
        print(testing_bills)
        print(expected_data)

        self.assertDictEqual(testing_bills, expected_data)

    def test_case_three(self):

        basket2 = {"Shampoo Large": 3, "Shampoo Medium": 1, "Shampoo Small": 3}
        mocked_value1 = Money('19.0', Currency.GBP)
        mocked_value2 = Money('5.50', Currency.GBP)
        mocked_value3 = Money('13.50', Currency.GBP)
        expected_data = {"sub_total_bill": mocked_value1,
                         "discount_applied": mocked_value2, "total_calculated": mocked_value3}

        for product_name, product_quantity in basket2.items():
            self.baskett.populate_basket_with_items(product_name, product_quantity)

        testing_bills = self.baskett.calculate_bill_if_offer()
        print(testing_bills)
        print(expected_data)
        self.assertDictEqual(testing_bills, expected_data)
